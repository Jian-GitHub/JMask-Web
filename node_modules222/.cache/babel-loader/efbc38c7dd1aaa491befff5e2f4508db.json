{"remainingRequest":"/Users/qi/WebstormProjects/jmask-web/node_modules/babel-loader/lib/index.js!/Users/qi/WebstormProjects/jmask-web/node_modules/eslint-loader/index.js??ref--14-0!/Users/qi/WebstormProjects/jmask-web/src/utils/Base64.js","dependencies":[{"path":"/Users/qi/WebstormProjects/jmask-web/src/utils/Base64.js","mtime":1650008299059},{"path":"/Users/qi/WebstormProjects/jmask-web/babel.config.js","mtime":1639631853000},{"path":"/Users/qi/WebstormProjects/jmask-web/node_modules/cache-loader/dist/cjs.js","mtime":1639631822000},{"path":"/Users/qi/WebstormProjects/jmask-web/node_modules/babel-loader/lib/index.js","mtime":1639631822000},{"path":"/Users/qi/WebstormProjects/jmask-web/node_modules/eslint-loader/index.js","mtime":1639631822000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZS5qcyI7CgovKioKICogQGRlc2NyaXB0aW9uIGJhc2U2NOe8lueggeaWueazlQogKiBAcGFyYW0gc3RyIOmcgOimgee8lueggeeahOWtl+espuS4sgogKiBAcmV0dXJuIOi/lOWbnue8lueggeWlveeahGJhc2U2NOWtl+espuS4sgogKgnkuK3mlofov5vooYznvJbnoIHml7bvvIzpnIDopoHkvb/nlKhiYXNlNjRFbmNvZGUoZW5jb2RlVVJJQ29tcG9uZW50KGEpKQogKi8KZnVuY3Rpb24gYmFzZTY0RW5jb2RlKHN0cikgewogIHJldHVybiBidG9hKGVuY29kZVVSSUNvbXBvbmVudChzdHIpLnJlcGxhY2UoLyUoWzAtOUEtRl17Mn0pL2csIGZ1bmN0aW9uIHRvU29saWRCeXRlcyhtYXRjaCwgcDEpIHsKICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKCcweCcgKyBwMSk7CiAgfSkpOwp9Ci8qKgogKiBCYXNlNjTor5HnoIEKICogQHBhcmFtIHZhbCBiYXNl57yW56CB5ZCO55qE5a2X56ym5LiyCiAqIEByZXR1cm5zIHtzdHJpbmd9IOWOn+Wtl+espuS4sgogKi8KLy8gZnVuY3Rpb24gYmFzZTY0RGVjb2RlKHZhbCl7Ci8vICAgICB2YXIgYmFzZTY0aGFzaCA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJzsKLy8KLy8gICAgIC8v5oqK5a2X56ym5Liy6L2s5o2i5Li65a2X56ym5pWw57uECi8vICAgICB2YXIgc3RyQXJyID0gdmFsLnNwbGl0KCcnKTsKLy8KLy8gICAgIC8v6KOF5YWl57uT5p6c55qE5pWw57uECi8vICAgICB2YXIgcmVzdWx0ID0gW107Ci8vICAgICB2YXIgcHJlQ29kZTsKLy8gICAgIHZhciBjb2RlOwovLyAgICAgLy/kvZnmlbDvvIwxLTMKLy8gICAgIHZhciBuOwovLyAgICAgZm9yKHZhciBpIGluIHN0ckFycil7Ci8vICAgICAgICAgbj1pJTQ7Ci8vICAgICAgICAgY29kZT1iYXNlNjRoYXNoLmluZGV4T2Yoc3RyQXJyW2ldKTsKLy8gICAgICAgICBzd2l0Y2gobil7Ci8vICAgICAgICAgICAgIGNhc2UgMDoKLy8gICAgICAgICAgICAgICAgIHByZUNvZGU9YmFzZTY0aGFzaC5pbmRleE9mKHN0ckFycltpXSk7Ci8vICAgICAgICAgICAgICAgICBicmVhazsKLy8gICAgICAgICAgICAgY2FzZSAxOgovLyAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShwcmVDb2RlPDwyfChjb2RlJjQ4KT4+NCkpOwovLyAgICAgICAgICAgICAgICAgYnJlYWs7Ci8vICAgICAgICAgICAgIGNhc2UgMjoKLy8gICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoKHByZUNvZGUmMTUpPDw0IHwoY29kZSY2MCk+PjIpKTsKLy8gICAgICAgICAgICAgICAgIGJyZWFrOwovLyAgICAgICAgICAgICBjYXNlIDM6Ci8vICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKCgocHJlQ29kZSYzKTw8Nil8Y29kZSkpOwovLyAgICAgICAgICAgICAgICAgYnJlYWs7Ci8vCi8vICAgICAgICAgfQovLyAgICAgICAgIHByZUNvZGU9Y29kZTsKLy8KLy8gICAgIH0KLy8KLy8gICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQocmVzdWx0LmpvaW4oJycpKTsKLy8gfQoKCmV4cG9ydCBkZWZhdWx0IGJhc2U2NEVuY29kZTs="},{"version":3,"sources":["/Users/qi/WebstormProjects/jmask-web/src/utils/Base64.js"],"names":["base64Encode","str","btoa","encodeURIComponent","replace","toSolidBytes","match","p1","String","fromCharCode"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,CAAsBC,GAAtB,EAA0B;AACtB,SAAOC,IAAI,CAACC,kBAAkB,CAACF,GAAD,CAAlB,CAAwBG,OAAxB,CAAgC,iBAAhC,EACR,SAASC,YAAT,CAAsBC,KAAtB,EAA6BC,EAA7B,EAAiC;AAC7B,WAAOC,MAAM,CAACC,YAAP,CAAoB,OAAOF,EAA3B,CAAP;AACH,GAHO,CAAD,CAAX;AAKH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeP,YAAf","sourcesContent":["/**\n * @description base64编码方法\n * @param str 需要编码的字符串\n * @return 返回编码好的base64字符串\n *\t中文进行编码时，需要使用base64Encode(encodeURIComponent(a))\n */\nfunction base64Encode(str){\n    return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g,\n        function toSolidBytes(match, p1) {\n            return String.fromCharCode('0x' + p1);\n        }));\n\n}\n/**\n * Base64译码\n * @param val base编码后的字符串\n * @returns {string} 原字符串\n */\n// function base64Decode(val){\n//     var base64hash = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n//\n//     //把字符串转换为字符数组\n//     var strArr = val.split('');\n//\n//     //装入结果的数组\n//     var result = [];\n//     var preCode;\n//     var code;\n//     //余数，1-3\n//     var n;\n//     for(var i in strArr){\n//         n=i%4;\n//         code=base64hash.indexOf(strArr[i]);\n//         switch(n){\n//             case 0:\n//                 preCode=base64hash.indexOf(strArr[i]);\n//                 break;\n//             case 1:\n//                 result.push(String.fromCharCode(preCode<<2|(code&48)>>4));\n//                 break;\n//             case 2:\n//                 result.push(String.fromCharCode((preCode&15)<<4 |(code&60)>>2));\n//                 break;\n//             case 3:\n//                 result.push(String.fromCharCode(((preCode&3)<<6)|code));\n//                 break;\n//\n//         }\n//         preCode=code;\n//\n//     }\n//\n//     return decodeURIComponent(result.join(''));\n// }\n\nexport default base64Encode"]}]}